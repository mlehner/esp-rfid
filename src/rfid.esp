int accountType;
int accountTypes[MAX_NUM_RELAYS];
String currentInput = "";
String pinCode = "";
String type = "";
String uid = "";
String lastUid = "";
String v1uid = "";
String username = "";
String remoteLogId = "";
bool wiegandAvailable = false;
unsigned long cardReadCooldown = 0;

#define WIEGAND_ENT 0xD
#define WIEGAND_ESC 0x1B

enum RfidStates
{
	waitingRfid,
	cardSwiped,
	pinCodeEntered
};
enum RfidProcessingStates
{
	waitingProcessing,
	notValid,
	wrongPincode,
	expired,
	unknown,
	valid,
	validAdmin,
	timedOut,
	cancelled
};

RfidStates rfidState = waitingRfid;
RfidProcessingStates processingState = waitingProcessing;

void remoteValidAccess(int doorNumber, const char *newUsername, const char *newUid, const char *logId)
{
	username = String(newUsername);
	uid = String(newUid);
	remoteLogId = String(logId);
	processingState = valid;

	if (digitalRead(config.relayPin[doorNumber]) == !config.relayType[doorNumber]) {
		activateRelay[doorNumber] = true;
	}
	previousMillis = millis();
}

void remoteInvalidAccess(const char *newUsername, const char *newUid, const char *logId)
{
	username = String(newUsername);
	uid = String(newUid);
	remoteLogId = String(logId);
	processingState = notValid;
}

void loadWiegandData()
{
	wiegandAvailable = false;
	// wg.available checks if there's new info and populates all the internal data
	// so it should be called only once per loop
	wiegandAvailable = wg.available();
	if (wiegandAvailable) {
		ESPRFID_LOG_DEBUG("wiegandAvailable = 1");
	}
}

void rfidPrepareRead()
{
	if (config.readertype == READER_WIEGAND)
	{
		loadWiegandData();
	}
}

void wiegandRead()
{
	if (wiegandAvailable && rfidState == waitingRfid)
	{
		// if we get anything between 24 or 34 bit burst then we have a scanned PICC
		if (wg.getWiegandType() >= WIEGANDTYPE_PICC24 && wg.getWiegandType() <= WIEGANDTYPE_PICC34)
		{
			uid = String(wg.getCode(), config.wiegandReadHex ? HEX : DEC);
			type = String(wg.getWiegandType(), DEC);

			cardReadCooldown = millis() + COOLDOWN_MILIS;
			ESPRFID_LOG_INFO("PICC's UID: %s, Type: %s", uid.c_str(), type.c_str());
			ESPRFID_LOG_DEBUG("cardReadCooldown = %lu", cardReadCooldown);

			DynamicJsonDocument root(512);
			root["cmd"] = "log";
			root["uid"] = uid;
			root["time"] = epoch;
			root["doorName"] = config.doorName[0];
			root["type"] = "cardswipe";
			root["cardType"] = type;
			root["hostname"] = config.deviceHostname;
			root["doorip"] = WiFi.localIP().toString();
			mqttPublishEvent(&root);

			// always wait for keypad
			// remote will reset state if pin is not required
			rfidState = cardSwiped;
			keyTimer = millis();
			ledWaitingOn();
			beeperPinWaiting();
		}
	}
}

/*
 *  Main function to read RFID cards. This function will call the
 *  correct reader function depending on the configured hardware,
 *  or otherwise call genericRead to read both RDM6300 and another
 *  configured reader.
 */
void rfidRead()
{
	/*
	 *  Do not try and read if we are already processing a card
	 */
	if (rfidState == cardSwiped)
	{
		return;
	}

	if (config.readertype == READER_WIEGAND)
	{
		wiegandRead();
	}
}

String translateKeyPress(unsigned long originalKeyPress) {
	switch (originalKeyPress) {
		case WIEGAND_ENT:
			return String('#');
		case WIEGAND_ESC:
			return String('*');
		default:
			return String(originalKeyPress);
	}
}

/*
 *  Try and read a PIN code from Wiegand hardware
 */
void pinCodeRead()
{
	if (config.readertype != READER_WIEGAND || !wiegandAvailable) {
		return;
	}

	ESPRFID_LOG_DEBUG("Keypress Type = %i, code = %lu", wg.getWiegandType(), wg.getCode());

	// if we get a 4 bit burst then a key has been pressed
	// add the key to the current input and reset the Waiting time
	// for the next key unless * or # have been pressed
	// we do not require * as the first character because some
	// readers use this as special admin code and would hence require *#PIN#
	if (wg.getWiegandType() == WIEGANDTYPE_KEYPRESS4 || wg.getWiegandType() == WIEGANDTYPE_KEYPRESS8)
	{
		if (wg.getCode() != WIEGAND_ENT && wg.getCode() != WIEGAND_ESC) // normal key entry, add to currentInput
		{
			ESPRFID_LOG_DEBUG("Keycode captured. . .");
			currentInput = currentInput + String(wg.getCode());
			keyTimer = millis();
			ledWaitingOn();
		} else if (keyTimer > 0) // if we are waitingProcessing on input still
		{
			if(wg.getCode() == WIEGAND_ESC) // esc, abort pincode
			{
				ESPRFID_LOG_INFO("Keycode escape, aborting pincode entry");
				rfidState = waitingRfid;
				processingState = cancelled;
				cardReadCooldown = millis() + COOLDOWN_MILIS;
			}
			if(wg.getCode() == WIEGAND_ENT) // enter, process pincode
			{
				pinCode = currentInput;

				DynamicJsonDocument root(512);
				root["cmd"] = "log";
				root["uid"] = uid == "" ? lastUid : uid;
				root["time"] = epoch;
				root["doorName"] = config.doorName[0];
				root["type"] = "pincodeentered";
				root["pincode"] = pinCode;
				root["hostname"] = config.deviceHostname;
				root["doorip"] = WiFi.localIP().toString();
				mqttPublishEvent(&root);

				if (config.pinCodeOnly && rfidState == waitingRfid)
				{
					uid = pinCode;
					rfidState = cardSwiped;
				} else if (rfidState == cardSwiped)
				{
					rfidState = pinCodeEntered;
				}
				ESPRFID_LOG_INFO("PICC's pin code: %s", currentInput.c_str());
				// reset lastUid since a PIN was entered
				lastUid = "";
				currentInput = "";
				keyTimer = 0;
				cardReadCooldown = millis() + COOLDOWN_MILIS;
			}
		}
	}
}

void rfidOutsideMessaging()
{
	if (processingState == valid)
	{
		ws.textAll("{\"command\":\"giveAccess\"}");
		ESPRFID_LOG_INFO(" has access relay");
		if (config.numRelays == 1) {
			mqttPublishAccess(epoch, "true", "Always", username, uid, remoteLogId);
		} else {
			mqttPublishAccess(epoch, "true", accountTypes, username, uid);
		}
		beeperValidAccess();
		ledAccessGrantedOn();
	}
	else if (processingState == validAdmin)
	{
		ws.textAll("{\"command\":\"giveAccess\"}");
		ESPRFID_LOG_INFO(" has admin access, enable wifi");
		if (config.numRelays == 1) {
			mqttPublishAccess(epoch, "true", "Admin", username, uid, remoteLogId);
		} else {
			mqttPublishAccess(epoch, "true", accountTypes, username, uid);
		}
		beeperAdminAccess();
		ledAccessGrantedOn();
	}
	else if (processingState == expired)
	{
		ESPRFID_LOG_INFO(" expired");
		mqttPublishAccess(epoch, "true", "Expired", username, uid, remoteLogId);
		ledAccessDeniedOn();
		beeperAccessDenied();
	}
	else if (processingState == wrongPincode)
	{
		ESPRFID_LOG_INFO("wrongPincode");
		mqttPublishAccess(epoch, "true", "Wrong pin code", username, uid, remoteLogId);
		ledAccessDeniedOn();
		beeperAccessDenied();
	}
	else if (processingState == notValid)
	{
		ESPRFID_LOG_INFO(" does not have access");
		mqttPublishAccess(epoch, "true", "Disabled", username, uid, remoteLogId);
		ledAccessDeniedOn();
		beeperAccessDenied();
	}
	else if (processingState == timedOut)
	{
		ESPRFID_LOG_INFO("timed out");
		mqttPublishAccess(epoch, "false", "Timed out", username, uid, remoteLogId);
		ledAccessDeniedOn();
		beeperAccessDenied();
	}
	else if (processingState == unknown)
	{
		ESPRFID_LOG_INFO("unknown");
		String data = String(uid) += " " + String(type);
		writeEvent("WARN", "rfid", "Unknown rfid tag is scanned", data);
		writeLatest(uid, "Unknown", 98);
		DynamicJsonDocument root(512);
		root["command"] = "piccscan";
		root["uid"] = uid;
		root["type"] = type;
		root["known"] = 0;
		size_t len = measureJson(root);
		AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
		if (buffer)
		{
			serializeJson(root, (char *)buffer->get(), len + 1);
			ws.textAll(buffer);
		}
		mqttPublishAccess(epoch, "false", "Denied", "Unknown", uid, remoteLogId);
		ledAccessDeniedOn();
		beeperAccessDenied();
	}
	else if (uid != "" && processingState != waitingProcessing)
	{
		ESPRFID_LOG_INFO("piccscan");
		writeLatest(uid, username, accountType);
		DynamicJsonDocument root(512);
		root["command"] = "piccscan";
		root["uid"] = uid;
		root["type"] = type;
		root["known"] = 1;
		root["acctype"] = accountType;
		root["user"] = username;
		size_t len = measureJson(root);
		AsyncWebSocketMessageBuffer *buffer = ws.makeBuffer(len);
		if (buffer)
		{
			serializeJson(root, (char *)buffer->get(), len + 1);
			ws.textAll(buffer);
		}
	}
}

void cleanRfidLoop()
{
	if (rfidState == waitingRfid)
	{
		delay(50);
	}
	// Keep an eye on timeout waitingProcessing for keypress
	// Clear code and timer when timeout is reached
	if (processingState != waitingProcessing)
	{
		ESPRFID_LOG_INFO("Read timeout or clean after read");
		keyTimer = 0;
		currentInput = "";
		username = "";
		type = "";
		lastUid = "";
		uid = "";
		v1uid = "";
		remoteLogId = "";
		rfidState = waitingRfid;
		processingState = waitingProcessing;
		ledWaitingOff();
	}
}

void rfidLoop()
{
	rfidPrepareRead();

	// check if cooldown has expired and we should read new card data
	if (millis() >= cardReadCooldown) {
		rfidRead();

		// if cooldown has expired, and we are still in pinCodeEntered
		// then mark this is timed out, remote took too long to respond

		if (rfidState == pinCodeEntered) {
			ESPRFID_LOG_DEBUG("cardReadCooldown expired during rfidState == pinCodeEntered, setting processingState = timedOut");
			processingState = timedOut;
		}
	}

	pinCodeRead();

	if ((keyTimer > 0 && millis() - keyTimer >= KEYBOARD_TIMEOUT_MILIS)) {
		ESPRFID_LOG_DEBUG("keyTimer expired, setting processingState = timedOut");
		processingState = timedOut;
	}

	rfidOutsideMessaging();
	cleanRfidLoop();
}

void ICACHE_FLASH_ATTR setupWiegandReader(int d0, int d1, bool removeParityBits)
{
	wg.begin(d0, d1, removeParityBits);
	rfidState = waitingRfid;
}