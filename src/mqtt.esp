#define MAX_MQTT_BUFFER 2048

char mqttBuffer[MAX_MQTT_BUFFER];

struct MqttMessage {
	char command[20] = "";
	char uid[20] = "";
	char user[64] = "";
	char door[20] = "";
	char logId[36] = "";
	char serializedMessage[MAX_MQTT_BUFFER];
	MqttMessage *nextMessage = NULL;
};

MqttMessage *mqttMessageQueue = NULL;

void connectToMqtt()
{
	if (!config.mqttEnabled || mqttClient.connected()) {
		return;
	}
	ESPRFID_LOG_INFO("Connecting MQTT");
	mqttClient.connect();
}

void disconnectMqtt()
{
	mqttReconnectTimer.detach();
	if (!config.mqttEnabled || !mqttClient.connected()) {
		return;
	}
	ESPRFID_LOG_INFO("Disconnecting MQTT");
	mqttClient.disconnect(true);
}

void onMqttDisconnect(AsyncMqttClientDisconnectReason reason)
{
	String reasonstr = "";
	switch (reason)
	{
	case (AsyncMqttClientDisconnectReason::TCP_DISCONNECTED):
		reasonstr = "TCP_DISCONNECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_UNACCEPTABLE_PROTOCOL_VERSION):
		reasonstr = "MQTT_UNACCEPTABLE_PROTOCOL_VERSION";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_IDENTIFIER_REJECTED):
		reasonstr = "MQTT_IDENTIFIER_REJECTED";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_SERVER_UNAVAILABLE):
		reasonstr = "MQTT_SERVER_UNAVAILABLE";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_MALFORMED_CREDENTIALS):
		reasonstr = "MQTT_MALFORMED_CREDENTIALS";
		break;
	case (AsyncMqttClientDisconnectReason::MQTT_NOT_AUTHORIZED):
		reasonstr = "MQTT_NOT_AUTHORIZED";
		break;
	case (AsyncMqttClientDisconnectReason::ESP8266_NOT_ENOUGH_SPACE):
		reasonstr = "ESP8266_NOT_ENOUGH_SPACE";
		break;
	default:
		reasonstr = "Unknown";
		break;
	}
	writeEvent("WARN", "mqtt", "Disconnected from MQTT server", reasonstr);

	if (WiFi.isConnected())
	{
		mqttReconnectTimer.once(RECONNECT_TIMEOUT_MQTT_SECONDS, connectToMqtt);
	}
}

void mqttPublishEvent(JsonDocument *root, String topic)
{
	if (config.mqttEnabled)
	{
		String stopic(config.mqttTopic);
		stopic = stopic + "/" + topic;
		String mqttBuffer;
		serializeJson(*root, mqttBuffer);
		mqttClient.publish(stopic.c_str(), 0, false, mqttBuffer.c_str());
		ESPRFID_LOG_INFO("Mqtt Publish: %s", mqttBuffer.c_str());
	}
}

void mqttPublishEvent(JsonDocument *root)
{
	mqttPublishEvent(root, "send");
}

void mqttPublishAck(String command)
{
	DynamicJsonDocument root(512);
	root["type"] = command;
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;
	mqttPublishEvent(&root);
}

void mqttPublishBoot(time_t boot_time)
{
	DynamicJsonDocument root(512);
	root["type"] = "boot";
	root["time"] = boot_time;
	root["uptime"] = "0";
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;
	root["reset_reason"] = ESP.getResetInfo();
	mqttPublishEvent(&root);
}

void mqttPublishHeartbeat(time_t heartbeat, time_t uptime)
{
	DynamicJsonDocument root(512);
	root["type"] = "heartbeat";
	root["time"] = heartbeat;
	root["uptime"] = uptime;
	root["ip"] = WiFi.localIP().toString();
	root["hostname"] = config.deviceHostname;
	root["wifi_uptime"] = wiFiUptimeMillis;
	root["wifi_rssi"] = WiFi.RSSI();
	root["wifi_bssid"] = WiFi.BSSIDstr();
	mqttPublishEvent(&root);
}

void mqttPublishAccess(time_t accesstime, String const &isknown, String const &type, String const &user, String const &uid, String const &remoteLogId)
{
	DynamicJsonDocument root(512);
	if (config.mqttEvents)
	{
		root["cmd"] = "log";
	}

	root["uid"] = uid;
	root["username"] = user;
	root["access"] = type;
	root["time"] = accesstime;
	root["doorName"] = config.doorName[0];

	if (!remoteLogId.isEmpty()) {
		root["log_id"] = remoteLogId;
	}

	root["type"] = "access";
	root["isKnown"] = isknown;
	root["hostname"] = config.deviceHostname;
	root["doorip"] = WiFi.localIP().toString();
	mqttPublishEvent(&root);
}

void mqttPublishAccess(time_t accesstime, String const &isknown, String const &type, String const &user, String const &uid)
{
	mqttPublishAccess(accesstime, isknown, type, user, uid, "");
}

void mqttPublishAccess(time_t accesstime, String const &isknown, int types[MAX_NUM_RELAYS], String const &user, String const &uid, String const &remoteLogId)
{
	DynamicJsonDocument root(512);
	JsonArray access = root.createNestedArray("access");
	JsonArray doorNames = root.createNestedArray("doorName");
	if (config.mqttEvents)
	{
		root["cmd"] = "log";
	}

	for (int i=0; i<config.numRelays; i++) {
		switch (types[i])
		{
		case 0:
			access.add("Disabled");
			break;
		case 1:
			access.add("Always");
			break;
		case 99:
			access.add("Admin");
			break;
		}
		doorNames.add(config.doorName[i]);
	}

	if (!remoteLogId.isEmpty()) {
		root["log_id"] = remoteLogId;
	}

	root["uid"] = uid;
	root["username"] = user;
	root["time"] = accesstime;

	root["type"] = "access";
	root["isKnown"] = isknown;
	root["hostname"] = config.deviceHostname;
	root["doorip"] = WiFi.localIP().toString();
	mqttPublishEvent(&root);
}

void mqttPublishAccess(time_t accesstime, String const &isknown, int types[MAX_NUM_RELAYS], String const &user, String const &uid)
{
	mqttPublishAccess(accesstime, isknown, types, user, uid, "");
}

void onMqttPublish(uint16_t packetId)
{
	writeEvent("INFO", "mqtt", "MQTT publish acknowledged", String(packetId));
}

void onMqttMessage(char *topic, char *payload, AsyncMqttClientMessageProperties properties, size_t len, size_t index, size_t total)
{
	size_t n = 0;
	size_t i = index;
	while(n < len) {
		mqttBuffer[i] = payload[n];
		n++;
		i++;
	}
	if(index + len == total) {
		mqttBuffer[i] = '\0';
	} else {
		return;
	}
	ESPRFID_LOG_INFO("JSON msg: %s", mqttBuffer);

	DynamicJsonDocument mqttIncomingJson(2048);
	// cast to const char to avoid modification in place of mqttBuffer
	auto error = deserializeJson(mqttIncomingJson, (const char *)mqttBuffer);
	if (error)
	{
		ESPRFID_LOG_ERROR("Failed parsing MQTT message: %s", mqttBuffer);
		return;
	}

	// Check if IP was sent with command because we only
	// accept commands where sent IP is equal to device IP
	if (!mqttIncomingJson.containsKey("doorip"))
	{
		return;
	}
	
	const char *ipadr = mqttIncomingJson["doorip"];
	String espIp = WiFi.localIP().toString();
	if (!((strcmp(ipadr, espIp.c_str()) == 0) && (ipadr != NULL)))
	{
		ESPRFID_LOG_INFO("ESP  IP: %s, recv IP: %s", espIp.c_str(), ipadr);
		return;
	}

	if(ESP.getFreeHeap() < 2048)
	{
		ESPRFID_LOG_ERROR("Dropping MQTT message, out of memory");
		writeEvent("ERRO", "mqtt", "Dropping MQTT message, out of memory", "");
		return;
	}

	auto* incomingMessage = new MqttMessage;

	{
		auto cmd = mqttIncomingJson["cmd"].as<const char *>();
		if (cmd != nullptr) {
			strlcpy(incomingMessage->command, cmd, sizeof(incomingMessage->command));
		} else {
			ESPRFID_LOG_INFO("No cmd key in MQTT message");
			return;
		}
	}

	{
		auto uid = mqttIncomingJson["uid"].as<const char *>();
		if (uid != nullptr) {
			strlcpy(incomingMessage->uid, uid, sizeof(incomingMessage->uid));
		}
	}

	{
		auto user = mqttIncomingJson["user"].as<const char*>();
		if (user != nullptr) {
			strlcpy(incomingMessage->user, user, sizeof(incomingMessage->user));
		}
	}

	{
		auto door = mqttIncomingJson["door"].as<const char*>();
		if (door != nullptr) {
			strlcpy(incomingMessage->door, door, sizeof(incomingMessage->door));
		}
	}

	{
		auto logId = mqttIncomingJson["log_id"].as<const char*>();
		if (logId != nullptr) {
			strlcpy(incomingMessage->logId, logId, sizeof(incomingMessage->logId));
		}
	}

	strlcpy(incomingMessage->serializedMessage, mqttBuffer, sizeof(mqttBuffer));

	MqttMessage* lastMessage = mqttMessageQueue;
	if(lastMessage == NULL)
	{
		mqttMessageQueue = incomingMessage;
	}
	else {
		while(lastMessage->nextMessage != NULL)
		{
			lastMessage = lastMessage->nextMessage;
		}
		lastMessage->nextMessage = incomingMessage;
	}
}

void processMqttMessage(MqttMessage *incomingMessage)
{
	char *command = incomingMessage->command;
	if (strcmp(command, "opendoor") == 0)
	{
		ESPRFID_LOG_INFO("Door open");
		writeLatest(" ", "MQTT", 1);
		beeperValidAccess();
		ledAccessGrantedOn();
		mqttPublishAccess(epoch, "true", "Always", "MQTT", " ");
		for (int currentRelay = 0; currentRelay < config.numRelays; currentRelay++)
		{
			activateRelay[currentRelay] = true;
		}
		previousMillis = millis();
	}
	else if (strcmp(command, "open") == 0)
	{
		ESPRFID_LOG_INFO("Door open");
		writeLatest(" ", "MQTT", 1);
		const char *door = incomingMessage->door;

		remoteValidAccess(String(door).toInt(), "MQTT", " ", "");
	}
	else if (strcmp(command, "accessgranted") == 0)
	{
		const char *door = incomingMessage->door;
		const char *username = incomingMessage->user;
		const char *uid = incomingMessage->uid;
		const char *logId = incomingMessage->logId;

		// @TODO support multiple "doors"/relays
		remoteValidAccess(String(door).toInt(), username, uid, logId);
	}
	else if (strcmp(command, "accessdenied") == 0)
	{
		const char *username = incomingMessage->user;
		const char *uid = incomingMessage->uid;
		const char *logId = incomingMessage->logId;

		// @TODO support other states: wrongPincode, expired, unknown
		remoteInvalidAccess(username, uid, logId);
	}
	else if (strcmp(command, "close") == 0)
	{
		ESPRFID_LOG_INFO("Door close");
		writeLatest(" ", "MQTT", 1);
		mqttPublishAccess(epoch, "true", "Always", "MQTT", " ");
		const char *door = incomingMessage->door;
		String stringDoor = String(door);
		int currentRelay = stringDoor.toInt();
		if (digitalRead(config.relayPin[currentRelay]) == config.relayType[currentRelay])
		{
			activateRelay[currentRelay] = true;
		}
		previousMillis = millis();
	}
	else if (strcmp(command, "deletlog") == 0)
	{
		logMaintenance("delete", "/latestlog.json.1", nullptr);
		logMaintenance("delete", "/eventlog.json", nullptr);
		logMaintenance("rollover", "/latestlog.json", nullptr);
		mqttPublishAck(command);
	}
	else if (strcmp(command, "getconf") == 0)
	{
		ESPRFID_LOG_INFO("Get configuration");
		File f = SPIFFS.open("/config.json", "r");
		char *buf;
		if (f)
		{
			int fileSize = f.size();
			buf = (char *)malloc(fileSize + 1);
			f.readBytes(buf, fileSize);
			f.close();
			buf[fileSize] = '\0';

			DynamicJsonDocument root(2048);
			root["type"] = "getconf";
			root["ip"] = WiFi.localIP().toString();
			root["hostname"] = config.deviceHostname;
			DynamicJsonDocument configFile(2048);
			deserializeJson(configFile, buf, fileSize + 1);
			root["configfile"] = configFile;
			mqttPublishEvent(&root);
			free(buf);
		}
	}
	else if (strcmp(command, "updateconf") == 0)
	{
		ESPRFID_LOG_INFO("Update configuration");
		DynamicJsonDocument mqttIncomingJson(2048);
		auto error = deserializeJson(mqttIncomingJson, incomingMessage->serializedMessage);
		if (error)
		{
			ESPRFID_LOG_ERROR("Failed parsing MQTT message!!!");
			return;
		}
		File f = SPIFFS.open("/config.json", "w");
		if (f)
		{
			serializeJsonPretty(mqttIncomingJson["configfile"], f);
			f.close();
			mqttPublishAck("updateconf");
			shouldReboot = true;
		}
	}

	free(incomingMessage);
	return;
}

void onMqttSubscribe(uint16_t packetId, uint8_t qos)
{
	ESPRFID_LOG_INFO("Subscribe acknowledged. packetId: %u qos: %u", packetId, qos);
}

void onMqttConnect(bool sessionPresent)
{
	ESPRFID_LOG_INFO("MQTT Connected session");
	mqttReconnectTimer.detach();
	if (sessionPresent == true)
	{
		ESPRFID_LOG_INFO("MQTT session Present: True");
		writeEvent("INFO", "mqtt", "Connected to MQTT Server", "Session Present");
	}
	mqttPublishBoot(epoch);

	String stopic(config.mqttTopic);
	stopic = stopic + "/cmd";
	mqttClient.subscribe(stopic.c_str(), 2);
}

void processMqttQueue()
{
	if (mqttMessageQueue == NULL) {
		return;
	}

	MqttMessage *messageToProcess = mqttMessageQueue;
	mqttMessageQueue = messageToProcess->nextMessage;
	processMqttMessage(messageToProcess);
}

void setupMqtt()
{
  if (!config.mqttEnabled)
	{
		return;
	}

	ESPRFID_LOG_INFO("Trying to setup MQTT");
	mqttClient.setServer(config.mqttHost, config.mqttPort);
	mqttClient.setCredentials(config.mqttUser, config.mqttPass);
	mqttClient.onDisconnect(onMqttDisconnect);
	mqttClient.onPublish(onMqttPublish);
	mqttClient.onSubscribe(onMqttSubscribe);
	mqttClient.onConnect(onMqttConnect);
	mqttClient.onMessage(onMqttMessage);
}
