void onWifiConnect(const WiFiEventStationModeConnected &event)
{
	ESPRFID_LOG_INFO("WiFi STA Connected");
	mqttReconnectTimer.detach();
	if (!wifiReconnectTimer.active() && !config.fallbackMode)
	{
		wifiReconnectTimer.once(300, setEnableWifi);
	}
	ledWifiOff();
}

void onWifiDisconnect(const WiFiEventStationModeDisconnected &event)
{
	if ( !WiFi.isConnected() )
	{
		return;
	}
	ESPRFID_LOG_INFO("WiFi STA Disconnected");
	mqttReconnectTimer.detach();
	disconnectMqtt();
	if (!wifiReconnectTimer.active() && !config.fallbackMode)
	{
		wifiReconnectTimer.once(300, setEnableWifi);
	}
	ledWifiOff();
}

void onWifiGotIP(const WiFiEventStationModeGotIP &event)
{
	ESPRFID_LOG_INFO("WiFi IP Connected: %s", WiFi.localIP().toString().c_str());
	wifiReconnectTimer.detach();
	ledWifiOn();
	connectToMqtt();
}

// Fallback to AP Mode, so we can connect to ESP if there is no Internet connection
void ICACHE_FLASH_ATTR fallbacktoAPMode()
{
	ESPRFID_LOG_INFO("ESP-RFID is running in Fallback AP Mode");
	WiFi.mode(WIFI_AP);
	IPAddress apIP(192, 168, 4, 1);
	IPAddress apSubnet(255, 255, 255, 0);

	WiFi.softAPConfig(apIP, apIP, apSubnet);

	uint8_t macAddr[6];
	WiFi.softAPmacAddress(macAddr);
	char ssid[15];
	sprintf(ssid, "ESP-RFID-%02x%02x%02x", macAddr[3], macAddr[4], macAddr[5]);

	if (WiFi.softAP(ssid))
	{
		ledWifiOn();
		ESPRFID_LOG_INFO("AP IP address: %s, AP SSID: %s", WiFi.softAPIP().toString().c_str(), ssid);
	}
}

// Try to connect Wi-Fi
bool ICACHE_FLASH_ATTR connectSTA(const char *ssid, const char *password, byte bssid[6])
{
	bool useBSSID = false;
	WiFi.disconnect(true);
	WiFi.mode(WIFI_STA);
	WiFi.persistent(false);
	WiFi.setAutoConnect(false);
	WiFi.setAutoReconnect(false);

	if (!config.dhcpEnabled)
	{
		WiFi.config(config.ipAddress, config.gatewayIp, config.subnetIp, config.dnsIp);
	}
	ESPRFID_LOG_INFO("Trying to connect WiFi: %s, WiFi BSSID: %c:%c:%c:%c:%c:%c", ssid, bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]);
	for (int i = 0; i < 6; i++)
	{
		if (bssid[i] != 0)
			useBSSID = true;
	}
	if (useBSSID)
	{
		ESPRFID_LOG_INFO("BSSID locked");
		WiFi.begin(ssid, password, 0, bssid);
	}
	else
	{
		ESPRFID_LOG_INFO("any BSSID");
		WiFi.begin(ssid, password);
	}
	unsigned long now = millis();
	uint8_t timeout = 15; // define when to time out in seconds
	do
	{
		ledWifiStatus();
		delay(500);
#ifdef ESPRFID_DEBUG
		if (!WiFi.isConnected())
			ESPRFID_DEBUG_PORT.print(F("."));
#endif
		if (WiFi.isConnected())
			break;
	} while (millis() - now < timeout * 1000);

	// We now out of the while loop, either time is out or we connected. check what happened
	if (WiFi.isConnected())
	{
		String data = ssid;
		data += " " + WiFi.localIP().toString();
		writeEvent("INFO", "wifi", "WiFi is connected", data);
		return true;
	}
	else
	{
		ESPRFID_LOG_WARN("Couldn't connect in time");
		if (!config.fallbackMode)
		{
			wifiReconnectTimer.once(300, setEnableWifi);
		}
		return false;
	}
}

void ICACHE_FLASH_ATTR disableWifi()
{
	wiFiUptimeMillis = 0;
	WiFi.disconnect(true);
	WiFi.softAPdisconnect(true);
	ESPRFID_LOG_INFO("Turn wifi off.");
}

void ICACHE_FLASH_ATTR enableWifi()
{
	wiFiUptimeMillis = 0;
	connectSTA(config.ssid, config.wifiPassword, config.bssid);
}

void setupWifi(bool configured)
{
	if (!configured)
	{
		WiFi.hostname("esp-rfid");
		fallbacktoAPMode();
	} else
	{
		wifiConnectHandler = WiFi.onStationModeConnected(onWifiConnect);
		wifiDisconnectHandler = WiFi.onStationModeDisconnected(onWifiDisconnect);
		wifiOnStationModeGotIPHandler = WiFi.onStationModeGotIP(onWifiGotIP);
		WiFi.hostname(config.deviceHostname);
		enableWifi();
	}
}
